"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var api_service_1 = require("../api.service");
var mock_document_1 = require("./mock-document");
require("rxjs/add/operator/toPromise");
var context_menu_component_1 = require("../context-menu/context-menu.component");
var ResultsComponent = (function () {
    function ResultsComponent(documentViewerService) {
        this.documentViewerService = documentViewerService;
        this.documents = [];
        this.totalResults = 0;
        this.sortType = "Last Modified";
        this.sortDirection = "desc";
        this.viewType = "List";
        this.dataSourceFilterItems = [{ itemName: "Gmail", selected: true },
            { itemName: "Slack", selected: false },
            { itemName: "Confluence", selected: false },
            { itemName: "Facebook", selected: false },
        ];
        this.groupFilterItems = [{ itemName: "Group1", selected: false },
            { itemName: "Group2", selected: false },
            { itemName: "Group3", selected: false },
            { itemName: "Group4", selected: false },
        ];
        this.categoryFilterItems = [{ itemName: "Cat1", selected: false },
            { itemName: "Cat2", selected: false },
            { itemName: "Cat3", selected: false },
            { itemName: "Cat4", selected: false },
        ];
        this.peopleFilterItems = [{ itemName: "Aditya", selected: false },
            { itemName: "Aria", selected: false },
            { itemName: "Nicole", selected: false },
            { itemName: "Mayda", selected: false },
        ];
        this.filters = [{ filterName: "Data Sources", filterType: "CheckBox", open: true, filterData: this.dataSourceFilterItems },
            { filterName: "Groups", filterType: "CheckBox", open: false, filterData: this.groupFilterItems },
            { filterName: "Date Range", filterType: "Date", open: true, filterData: this.emptyFilterItems },
            { filterName: "Categories", filterType: "CheckBox", open: false, filterData: this.categoryFilterItems },
            { filterName: "People", filterType: "CheckBox", open: false, filterData: this.peopleFilterItems }];
        this.items = [
            { name: 'John', otherProperty: 'Foo' },
            { name: 'Joe', otherProperty: 'Bar' }
        ];
    }
    ResultsComponent.prototype.ngOnInit = function () {
        this.documents = mock_document_1.MDOCUMENTS;
        this.totalResults = mock_document_1.MDOCUMENTS.length;
    };
    ResultsComponent.prototype.onSelect = function (document) {
        this.selectedDocument = document;
    };
    ResultsComponent.prototype.toggleViewType = function () {
        if (this.viewType === 'List') {
            this.viewType = 'Grid';
        }
        else {
            this.viewType = 'List';
        }
    };
    ResultsComponent.prototype.getTestDoc = function () {
        this.documentViewerService.get("http://130.211.100.71/zeo0/account1/ramon@atlasense.com/3a663ff54eac4e71acd3f6b7ea983fb1/0188345893c24ee29ae8b0f881ed8474").toPromise()
            .then(function (response) { return response.json().data; })
            .catch(this.handleError);
    };
    ResultsComponent.prototype.handleError = function (error) {
        console.error('An error occurred', error);
        return Promise.reject(error.message || error);
    };
    return ResultsComponent;
}());
__decorate([
    core_1.ViewChild('basicMenu'),
    __metadata("design:type", context_menu_component_1.ContextMenuComponent)
], ResultsComponent.prototype, "basicMenu", void 0);
ResultsComponent = __decorate([
    core_1.Component({
        selector: 'app-results',
        templateUrl: './results.component.html',
        styleUrls: ['./results.component.css']
    }),
    __metadata("design:paramtypes", [api_service_1.AtlasenseapiService])
], ResultsComponent);
exports.ResultsComponent = ResultsComponent;
//# sourceMappingURL=results.component.js.map