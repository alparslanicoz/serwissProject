"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var config_service_1 = require("./config.service");
var configuration_1 = require("./configuration");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
var core_2 = require("@angular/core");
var angular2_jwt_1 = require("angular2-jwt");
var OAUTH_REFRESH_URL = '/oauth/refresh';
var OAUTH_GETTOKEN_URL = '/oauth/get_auth_token';
var PSERVER_AUTHCODE_URL = '/@oauthgetcode';
var ATLASENSE_LOGIN_URL = '@login';
var ATLASENSE_REFRESH_URL = '@refresh';
var AuthService = (function () {
    function AuthService(http, config) {
        var _this = this;
        this.http = http;
        this.config = config;
        this.jwtHelper = new angular2_jwt_1.JwtHelper();
        this.loggedin = new core_2.EventEmitter();
        var local_auth = localStorage.getItem('atlasense_auth');
        if (local_auth) {
            this.auth = JSON.parse(local_auth);
        }
        else {
            this.auth = new configuration_1.Authentication();
        }
        this.loggedin.subscribe(function (data) { return _this.saveUserToken(data.data, data.refresh); });
    }
    AuthService.prototype.save_auth = function () {
        localStorage.setItem('atlasense_auth', JSON.stringify(this.auth));
    };
    AuthService.prototype.login_oauth = function (user, password) {
        var _this = this;
        var endpoint = this.config.getCanonicalURL() + PSERVER_AUTHCODE_URL +
            '?client_id=' + this.config.config.client_id + '&scope=' + this.config.config.account;
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/json');
        this.http.options(endpoint, { headers: headers }).subscribe(function (res) { return _this.call_real_oauth(res, user, password); }, function (err) { return console.log(err); });
    };
    AuthService.prototype.call_real_oauth = function (response, user, password) {
        var _this = this;
        var endpoint = this.config.getAuthURL() + OAUTH_GETTOKEN_URL;
        var body = JSON.stringify({
            "grant_type": 'user',
            "code": response.json().auth_code,
            "username": user,
            "password": password,
            "scopes": [this.config.config.account],
            "client_id": this.config.config.client_id
        });
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/json');
        var refresh = this.auth.oauth + OAUTH_REFRESH_URL;
        this.http.post(endpoint, body, { headers: headers }).subscribe(function (res) { return _this.saveUserToken(res, refresh); }, function (err) { return console.log(err); });
    };
    AuthService.prototype.saveUserToken = function (res, refresh) {
        var _this = this;
        this.auth.jwt = res;
        var decoded = this.jwtHelper.decodeToken(res._body);
        this.auth.token = decoded.token;
        this.auth.username = decoded.login;
        var expiration = this.jwtHelper.getTokenExpirationDate(res._body).getTime();
        var now = new Date().getTime();
        var timeout = expiration - now - 3600000;
        console.log('Refresh again in ' + timeout);
        this.save_auth();
        this.timerRefreshToken = Rx_1.Observable.timer(timeout);
        this.timerRefreshToken.subscribe(function (x) { return _this.refreshToken(refresh); });
    };
    AuthService.prototype.refreshToken = function (endpoint) {
        var _this = this;
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/json');
        var body = JSON.stringify({
            'token': this.auth.token,
            'user': this.auth.username,
            'cliend_id': this.config.config.client_id
        });
        this.http.post(endpoint, body, { headers: headers }).subscribe(function (res) { return _this.saveUserToken(res, endpoint); }, function (err) { return console.log(err); });
    };
    return AuthService;
}());
__decorate([
    core_2.Output(),
    __metadata("design:type", Object)
], AuthService.prototype, "loggedin", void 0);
AuthService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http,
        config_service_1.ConfigurationService])
], AuthService);
exports.AuthService = AuthService;
//# sourceMappingURL=auth.service.js.map