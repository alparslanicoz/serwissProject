"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var config_service_1 = require("./config.service");
var auth_service_1 = require("./auth.service");
var REGISTRY_ENDPOINT = '@registry';
var TYPES_ENDPOINT = '@types';
var SHARING_ENTRYPOINT = '@sharing';
var AtlasenseapiService = (function () {
    function AtlasenseapiService(http, config, auth) {
        this.http = http;
        this.config = config;
        this.auth = auth;
    }
    AtlasenseapiService.prototype.createAuthHeaders = function (headers) {
        var auth_header = '';
        auth_header = 'Bearer ' + this.auth.auth.jwt;
        headers.append('Authorization', auth_header);
        headers.append('Content-Type', 'application/json');
    };
    AtlasenseapiService.prototype.get = function (url) {
        var headers = new http_1.Headers();
        this.createAuthHeaders(headers);
        return this.http.get(url, {
            headers: headers
        });
    };
    AtlasenseapiService.prototype.post = function (url, data) {
        var headers = new http_1.Headers();
        this.createAuthHeaders(headers);
        return this.http.post(url, data, {
            headers: headers
        });
    };
    AtlasenseapiService.prototype.head = function (url) {
        var headers = new http_1.Headers();
        this.createAuthHeaders(headers);
        return this.http.head(url, {
            headers: headers
        });
    };
    AtlasenseapiService.prototype.delete = function (url) {
        var headers = new http_1.Headers();
        this.createAuthHeaders(headers);
        return this.http.delete(url, {
            headers: headers
        });
    };
    AtlasenseapiService.prototype.patch = function (url, data) {
        var headers = new http_1.Headers();
        this.createAuthHeaders(headers);
        return this.http.patch(url, {
            headers: headers
        });
    };
    AtlasenseapiService.prototype.getSharing = function (object_id) {
        var url = object_id + '/' + SHARING_ENTRYPOINT;
        return this.get(url);
    };
    AtlasenseapiService.prototype.getRegistry = function () {
        var url = this.config.internal_urls.canonical + '/' + REGISTRY_ENDPOINT;
        return this.get(url);
    };
    AtlasenseapiService.prototype.getTypes = function () {
        var url = this.config.internal_urls.canonical + '/' + TYPES_ENDPOINT;
        return this.get(url);
    };
    AtlasenseapiService.prototype.getSchema = function (type) {
        var url = this.config.internal_urls.canonical + '/' + TYPES_ENDPOINT + '/' + type;
        return this.get(url);
    };
    AtlasenseapiService.prototype.createObject = function (container, type, object) {
        object['@type'] = type;
        var data = JSON.stringify(object);
        return this.post(container, data);
    };
    AtlasenseapiService.prototype.getDefinition = function () {
        var url = this.config.internal_urls.canonical;
        var the_arr = url.split('/');
        the_arr.pop();
        the_arr.pop();
        url = the_arr.join('/');
        return this.get(url);
    };
    return AtlasenseapiService;
}());
AtlasenseapiService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, config_service_1.ConfigurationService, auth_service_1.AuthService])
], AtlasenseapiService);
exports.AtlasenseapiService = AtlasenseapiService;
//# sourceMappingURL=api.service.js.map