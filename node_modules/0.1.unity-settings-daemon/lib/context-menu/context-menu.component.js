"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var context_menu_service_1 = require("./context-menu.service");
var context_menu_item_directive_1 = require("./context-menu.item.directive");
var ContextMenuComponent = (function () {
    function ContextMenuComponent(_contextMenuService, changeDetector) {
        var _this = this;
        this._contextMenuService = _contextMenuService;
        this.changeDetector = changeDetector;
        this.close = new core_1.EventEmitter();
        this.visibleMenuItems = [];
        this.links = [];
        this.isShown = false;
        this.isOpening = false;
        this.mouseLocation = { left: 0, top: 0 };
        _contextMenuService.show.subscribe(function (menuEvent) { return _this.onMenuEvent(menuEvent); });
    }
    Object.defineProperty(ContextMenuComponent.prototype, "locationCss", {
        get: function () {
            return {
                'position': 'fixed',
                'display': this.isShown ? 'block' : 'none',
                left: this.mouseLocation.left + 'px',
                top: this.mouseLocation.top + 'px',
            };
        },
        enumerable: true,
        configurable: true
    });
    ContextMenuComponent.prototype.clickedOutside = function () {
        if (!this.isOpening) {
            this.hideMenu();
        }
    };
    ContextMenuComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.menuItems.forEach(function (menuItem) {
            menuItem.execute.subscribe(function () { return _this.hideMenu(); });
        });
    };
    ContextMenuComponent.prototype.isMenuItemEnabled = function (menuItem) {
        return this.evaluateIfFunction(menuItem.enabled);
    };
    ContextMenuComponent.prototype.isMenuItemVisible = function (menuItem) {
        return this.evaluateIfFunction(menuItem.visible);
    };
    ContextMenuComponent.prototype.evaluateIfFunction = function (value) {
        if (value instanceof Function) {
            return value(this.item);
        }
        return value;
    };
    ContextMenuComponent.prototype.isDisabled = function (link) {
        return link.enabled && !link.enabled(this.item);
    };
    ContextMenuComponent.prototype.execute = function (link, $event) {
        if (this.isDisabled(link)) {
            return;
        }
        this.hideMenu();
        link.click(this.item, $event);
    };
    ContextMenuComponent.prototype.onMenuEvent = function (menuEvent) {
        var _this = this;
        var actions = menuEvent.actions, contextMenu = menuEvent.contextMenu, event = menuEvent.event, item = menuEvent.item;
        if (contextMenu && contextMenu !== this) {
            this.hideMenu();
            return;
        }
        this.isOpening = true;
        setTimeout(function () { return _this.isOpening = false; }, 400);
        if (actions) {
            if (console && console.warn) {
                console.warn("actions configuration object is deprecated and will be removed in version 1.x.\n        See https://github.com/isaacplmann/angular2-contextmenu for the new declarative syntax.");
            }
        }
        if (actions && actions.length > 0) {
            this.setVisibleMenuItems();
            this.showMenu();
        }
        else if (this.menuItems) {
            setTimeout(function () {
                _this.setVisibleMenuItems();
                if (_this.visibleMenuItems.length > 0) {
                    _this.showMenu();
                }
                else {
                    _this.hideMenu();
                }
            });
        }
        else {
            this.hideMenu();
        }
        this.links = actions;
        this.item = item;
        this.mouseLocation = {
            left: event.clientX,
            top: event.clientY,
        };
    };
    ContextMenuComponent.prototype.setVisibleMenuItems = function () {
        var _this = this;
        this.visibleMenuItems = this.menuItems.filter(function (menuItem) { return _this.isMenuItemVisible(menuItem); });
    };
    ContextMenuComponent.prototype.showMenu = function () {
        this.isShown = true;
        this.changeDetector.markForCheck();
    };
    ContextMenuComponent.prototype.hideMenu = function () {
        if (this.isShown === true) {
            this.close.emit({});
        }
        this.isShown = false;
        this.changeDetector.markForCheck();
    };
    return ContextMenuComponent;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ContextMenuComponent.prototype, "close", void 0);
__decorate([
    core_1.ContentChildren(context_menu_item_directive_1.ContextMenuItemDirective),
    __metadata("design:type", core_1.QueryList)
], ContextMenuComponent.prototype, "menuItems", void 0);
__decorate([
    core_1.HostListener('document:click'),
    core_1.HostListener('document:contextmenu'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ContextMenuComponent.prototype, "clickedOutside", null);
ContextMenuComponent = __decorate([
    core_1.Component({
        selector: 'context-menu',
        styles: [],
        template: "<div class=\"dropdown angular2-contextmenu\">\n      <ul *ngIf=\"item\" [ngStyle]=\"locationCss\" class=\"dropdown-menu\">\n        <!-- Imperative context menu -->\n        <li *ngFor=\"let link of links\" [class.disabled]=\"isDisabled(link)\">\n          <a href [class.disabled]=\"isDisabled(link)\"\n            (click)=\"execute(link, $event); $event.preventDefault(); $event.stopPropagation();\"\n            innerHTML=\"{{link.html ? link.html(item) : ''}}\"></a>\n        </li>\n        <!-- Declarative context menu -->\n        <li *ngFor=\"let menuItem of visibleMenuItems\" [class.disabled]=\"!isMenuItemEnabled(menuItem)\"\n          [attr.role]=\"menuItem.divider ? 'separator' : undefined\" [class.divider]=\"menuItem.divider\">\n          <a *ngIf=\"!menuItem.divider\" href \n            [class.disabled]=\"!isMenuItemEnabled(menuItem)\"\n            (click)=\"menuItem.triggerExecute(item, $event); $event.preventDefault(); $event.stopPropagation();\">\n            <template [ngTemplateOutlet]=\"menuItem.template\" [ngOutletContext]=\"{ $implicit: item }\"></template>\n          </a>\n        </li>\n      </ul>\n    </div>\n  ",
    }),
    __metadata("design:paramtypes", [context_menu_service_1.ContextMenuService,
        core_1.ChangeDetectorRef])
], ContextMenuComponent);
exports.ContextMenuComponent = ContextMenuComponent;
//# sourceMappingURL=context-menu.component.js.map