{"version":3,"file":"api.service.js","sourceRoot":"","sources":["../../src/lib/api.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA2C;AAC3C,sCAAwD;AACxD,mDAAwD;AACxD,+CAA6C;AAG7C,IAAM,iBAAiB,GAAG,WAAW,CAAC;AACtC,IAAM,cAAc,GAAG,QAAQ,CAAC;AAChC,IAAM,kBAAkB,GAAG,UAAU,CAAC;AAItC,IAAa,mBAAmB;IAE9B,6BAAmB,IAAU,EAAS,MAA4B,EAAS,IAAiB;QAAzE,SAAI,GAAJ,IAAI,CAAM;QAAS,WAAM,GAAN,MAAM,CAAsB;QAAS,SAAI,GAAJ,IAAI,CAAa;IAAI,CAAC;IAEjG,+CAAiB,GAAjB,UAAkB,OAAgB;QAEhC,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,WAAW,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QAC7C,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAC7C,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IACrD,CAAC;IAED,iCAAG,GAAH,UAAI,GAAG;QAEL,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;YACxB,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;IACL,CAAC;IAED,kCAAI,GAAJ,UAAK,GAAG,EAAE,IAAI;QAEZ,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE;YAC/B,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;IACL,CAAC;IAED,kCAAI,GAAJ,UAAK,GAAG;QACN,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YACzB,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;IACL,CAAC;IAED,oCAAM,GAAN,UAAO,GAAG;QACR,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YAC3B,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;IACL,CAAC;IAED,mCAAK,GAAL,UAAM,GAAG,EAAE,IAAI;QACb,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;YAC1B,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;IACL,CAAC;IAED,wCAAU,GAAV,UAAW,SAAS;QAClB,IAAI,GAAG,GAAG,SAAS,GAAI,GAAG,GAAG,kBAAkB,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,yCAAW,GAAX;QACE,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,GAAI,GAAG,GAAG,iBAAiB,CAAC;QACzE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,sCAAQ,GAAR;QACE,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,GAAG,GAAG,GAAG,cAAc,CAAC;QACrE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,uCAAS,GAAT,UAAU,IAAI;QACZ,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,GAAG,GAAG,GAAG,cAAc,GAAG,GAAG,GAAG,IAAI,CAAC;QAClF,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,0CAAY,GAAZ,UAAa,SAAS,EAAE,IAAI,EAAE,MAAM;QAClC,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,CAAA;QACtB,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QACjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;IACnC,CAAC;IAED,2CAAa,GAAb;QACE,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC;QAC9C,IAAI,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,EAAE,CAAC;QACd,OAAO,CAAC,GAAG,EAAE,CAAC;QACd,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAEH,0BAAC;AAAD,CAAC,AAzFD,IAyFC;AAzFY,mBAAmB;IAD/B,iBAAU,EAAE;qCAGc,WAAI,EAAiB,qCAAoB,EAAe,0BAAW;GAFjF,mBAAmB,CAyF/B;AAzFY,kDAAmB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, Response } from '@angular/http';\nimport { ConfigurationService } from './config.service';\nimport { AuthService } from './auth.service';\nimport { Observable } from 'rxjs/Observable';\n\nconst REGISTRY_ENDPOINT = '@registry';\nconst TYPES_ENDPOINT = '@types';\nconst SHARING_ENTRYPOINT = '@sharing';\n\n\n@Injectable()\nexport class AtlasenseapiService {\n\n  constructor(public http: Http, public config: ConfigurationService, public auth: AuthService) { }\n\n  createAuthHeaders(headers: Headers) {\n    // Add the auth headers\n    let auth_header = '';\n    auth_header = 'Bearer ' + this.auth.auth.jwt;\n    headers.append('Authorization', auth_header);\n    headers.append('Content-Type', 'application/json');\n  }\n\n  get(url): Observable<Response>  {\n    // do a get request to site\n    let headers = new Headers();\n    this.createAuthHeaders(headers);\n    return this.http.get(url, {\n      headers: headers\n    });\n  }\n\n  post(url, data): Observable<Response>  {\n    // do a post request to site\n    let headers = new Headers();\n    this.createAuthHeaders(headers);\n    return this.http.post(url, data, {\n      headers: headers\n    });\n  }\n\n  head(url): Observable<Response>  {\n    let headers = new Headers();\n    this.createAuthHeaders(headers);\n    return this.http.head(url, {\n      headers: headers\n    });\n  }\n\n  delete(url): Observable<Response>  {\n    let headers = new Headers();\n    this.createAuthHeaders(headers);\n    return this.http.delete(url, {\n      headers: headers\n    });\n  }\n\n  patch(url, data): Observable<Response>  {\n    let headers = new Headers();\n    this.createAuthHeaders(headers);\n    return this.http.patch(url, {\n      headers: headers\n    });\n  }\n\n  getSharing(object_id) {\n    let url = object_id  + '/' + SHARING_ENTRYPOINT;\n    return this.get(url);\n  }\n\n  getRegistry() {\n    let url = this.config.internal_urls.canonical  + '/' + REGISTRY_ENDPOINT;\n    return this.get(url);\n  }\n\n  getTypes() {\n    let url = this.config.internal_urls.canonical + '/' + TYPES_ENDPOINT;\n    return this.get(url);\n  }\n\n  getSchema(type) {\n    let url = this.config.internal_urls.canonical + '/' + TYPES_ENDPOINT + '/' + type;\n    return this.get(url);\n  }\n\n  createObject(container, type, object) {\n    object['@type'] = type\n    let data = JSON.stringify(object)\n    return this.post(container, data)\n  }\n\n  getDefinition() {\n    let url = this.config.internal_urls.canonical;\n    var the_arr = url.split('/');\n    the_arr.pop();\n    the_arr.pop();\n    url = the_arr.join('/');\n    return this.get(url);\n  }\n\n}\n"]}