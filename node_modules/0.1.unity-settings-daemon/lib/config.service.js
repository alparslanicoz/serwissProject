"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("@angular/core");
var configuration_1 = require("./configuration");
var configuration_2 = require("./configuration");
var http_1 = require("@angular/http");
var ENDPOINT_GET_URLS = '/oauth/get_scope_urls';
var ConfigurationService = (function () {
    function ConfigurationService(http, apiConfig) {
        var _this = this;
        this.http = http;
        this.apiConfig = apiConfig;
        this.config = apiConfig;
        this.internal_urls = new configuration_2.Urls();
        this.loadUrlsFromAuth().subscribe(function (res) { return _this.saveUrls(res); }, function (err) { return console.log(err); });
    }
    ConfigurationService.prototype.loadUrlsFromAuth = function () {
        var body = JSON.stringify({
            'client_id': this.config.client_id,
            'scope': this.config.account
        });
        return this.http.post(this.config.bootstrap_url + ENDPOINT_GET_URLS, body);
    };
    ConfigurationService.prototype.saveUrls = function (res) {
        var value = res.json();
        var urls = value[this.config.account];
        for (var _i = 0, urls_1 = urls; _i < urls_1.length; _i++) {
            var url = urls_1[_i];
            var url_array = url.split('#');
            if (url_array[0] === 'canonical') {
                if (this.config.force_local !== undefined) {
                    this.internal_urls.canonical = 'http://localhost:8080/zodb1/' + this.config.account;
                }
                else {
                    this.internal_urls.canonical = url_array[1];
                }
            }
            if (url_array[0] === 'proxy') {
                if (this.config.force_local !== undefined) {
                    this.internal_urls.proxy = 'http://localhost:8080/zodb1/' + this.config.account;
                }
                else {
                    this.internal_urls.proxy = url_array[1];
                }
            }
            if (url_array[0] === 'websocket') {
                if (this.config.force_local !== undefined) {
                    this.internal_urls.websocket = 'http://localhost:8080/zodb1/' + this.config.account;
                }
                else {
                    this.internal_urls.websocket = url_array[1];
                }
            }
        }
    };
    ConfigurationService.prototype.getWSURL = function () {
        return this.internal_urls.websocket;
    };
    ConfigurationService.prototype.getCanonicalURL = function () {
        return this.internal_urls.canonical;
    };
    ConfigurationService.prototype.getAuthURL = function () {
        return this.config.bootstrap_url;
    };
    ConfigurationService.prototype.getProxyURL = function () {
        return this.internal_urls.proxy;
    };
    ConfigurationService.prototype.save_config = function () {
        localStorage.setItem('atlasense_config', JSON.stringify(this.internal_urls));
    };
    return ConfigurationService;
}());
ConfigurationService = __decorate([
    core_1.Injectable(),
    __param(1, core_1.Inject('api.config')),
    __metadata("design:paramtypes", [http_1.Http,
        configuration_1.Configuration])
], ConfigurationService);
exports.ConfigurationService = ConfigurationService;
//# sourceMappingURL=config.service.js.map