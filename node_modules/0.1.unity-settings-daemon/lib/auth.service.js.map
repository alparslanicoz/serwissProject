{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../src/lib/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA2C;AAC3C,mDAAwD;AACxD,iDAAiD;AACjD,sCAAwD;AACxD,8BAAqC;AACrC,sCAAqD;AACrD,6CAAyC;AAEzC,IAAM,iBAAiB,GAAG,gBAAgB,CAAC;AAC3C,IAAM,kBAAkB,GAAG,uBAAuB,CAAC;AACnD,IAAM,oBAAoB,GAAG,gBAAgB,CAAC;AAC9C,IAAM,mBAAmB,GAAG,QAAQ,CAAC;AACrC,IAAM,qBAAqB,GAAG,UAAU,CAAC;AAIzC,IAAa,WAAW;IAOtB,qBACS,IAAU,EACV,MAA4B;QAFrC,iBAYC;QAXQ,SAAI,GAAJ,IAAI,CAAM;QACV,WAAM,GAAN,MAAM,CAAsB;QALrC,cAAS,GAAc,IAAI,wBAAS,EAAE,CAAC;QAC7B,aAAQ,GAAG,IAAI,mBAAY,EAAE,CAAC;QAKpC,IAAI,UAAU,GAAG,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACrC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,IAAI,GAAG,IAAI,8BAAc,EAAE,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CACrB,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,EAA3C,CAA2C,CACpD,CAAC;IACN,CAAC;IAED,+BAAS,GAAT;QACE,YAAY,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACpE,CAAC;IAID,iCAAW,GAAX,UAAY,IAAI,EAAE,QAAQ;QAA1B,iBAYC;QAXC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,GAAG,oBAAoB;YACjE,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;QACxF,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,CAAC,OAAO,CACf,QAAQ,EACR,EAAC,OAAO,EAAE,OAAO,EAAC,CACnB,CAAC,SAAS,CACT,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAzC,CAAyC,EAChD,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CACxB,CAAC;IACJ,CAAC;IAED,qCAAe,GAAf,UAAgB,QAAQ,EAAE,IAAI,EAAE,QAAQ;QAAxC,iBAwBC;QAvBC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,kBAAkB,CAAC;QAC7D,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CACvB;YACE,YAAY,EAAE,MAAM;YACpB,MAAM,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,SAAS;YACjC,UAAU,EAAC,IAAI;YACf,UAAU,EAAE,QAAQ;YACpB,QAAQ,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;YACtC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS;SAC1C,CAEF,CAAC;QACF,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnD,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,IAAI,CACZ,QAAQ,EACR,IAAI,EACJ,EAAC,OAAO,EAAE,OAAO,EAAC,CACnB,CAAC,SAAS,CACT,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,EAAhC,CAAgC,EACvC,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CACxB,CAAC;IACJ,CAAC;IAID,mCAAa,GAAb,UAAc,GAAG,EAAE,OAAO;QAA1B,iBAcC;QAbC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACpB,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC;QACnC,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;QAC5E,IAAI,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAC/B,IAAI,OAAO,GAAG,UAAU,GAAG,GAAG,GAAG,OAAO,CAAC;QACzC,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,iBAAiB,GAAG,eAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnD,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAC9B,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAA1B,CAA0B,CAChC,CAAC;IACJ,CAAC;IAED,kCAAY,GAAZ,UAAa,QAAQ;QAArB,iBAkBC;QAjBC,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnD,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CACvB;YACE,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;YACxB,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;YAC1B,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS;SAC1C,CACF,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,IAAI,CACZ,QAAQ,EACR,IAAI,EACJ,EAAC,OAAO,EAAE,OAAO,EAAC,CACnB,CAAC,SAAS,CACT,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAjC,CAAiC,EACxC,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CACxB,CAAC;IACJ,CAAC;IAEH,kBAAC;AAAD,CAAC,AAzGD,IAyGC;AApGW;IAAT,aAAM,EAAE;;6CAA+B;AAL7B,WAAW;IADvB,iBAAU,EAAE;qCASI,WAAI;QACF,qCAAoB;GAT1B,WAAW,CAyGvB;AAzGY,kCAAW","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ConfigurationService } from './config.service';\nimport { Authentication } from './configuration';\nimport { Http, Headers, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport { Output, EventEmitter } from '@angular/core';\nimport { JwtHelper } from 'angular2-jwt';\n\nconst OAUTH_REFRESH_URL = '/oauth/refresh';\nconst OAUTH_GETTOKEN_URL = '/oauth/get_auth_token';\nconst PSERVER_AUTHCODE_URL = '/@oauthgetcode';\nconst ATLASENSE_LOGIN_URL = '@login';\nconst ATLASENSE_REFRESH_URL = '@refresh';\n\n\n@Injectable()\nexport class AuthService {\n\n  timerRefreshToken: any;\n  auth: Authentication;\n  jwtHelper: JwtHelper = new JwtHelper();\n  @Output() loggedin = new EventEmitter();\n\n  constructor(\n    public http: Http,\n    public config: ConfigurationService) {\n      let local_auth = localStorage.getItem('atlasense_auth');\n      if (local_auth) {\n        this.auth = JSON.parse(local_auth);\n      } else {\n        this.auth = new Authentication();\n      }\n      this.loggedin.subscribe(\n        data => this.saveUserToken(data.data, data.refresh)\n      );\n  }\n\n  save_auth() {\n    localStorage.setItem('atlasense_auth', JSON.stringify(this.auth));\n  }\n\n  // Oauth functions for atlasense.oauth\n\n  login_oauth(user, password) {\n    let endpoint = this.config.getCanonicalURL() + PSERVER_AUTHCODE_URL +\n      '?client_id=' + this.config.config.client_id + '&scope=' + this.config.config.account;\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    this.http.options(\n      endpoint,\n      {headers: headers}\n    ).subscribe(\n      res => this.call_real_oauth(res, user, password),\n      err => console.log(err)\n    );\n  }\n\n  call_real_oauth(response, user, password) {\n    let endpoint = this.config.getAuthURL() + OAUTH_GETTOKEN_URL;\n    let body = JSON.stringify(\n      {\n        \"grant_type\": 'user',\n        \"code\": response.json().auth_code,\n        \"username\":user,\n        \"password\": password,\n        \"scopes\": [this.config.config.account],\n        \"client_id\": this.config.config.client_id\n      }\n\n    );\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    let refresh = this.auth.oauth + OAUTH_REFRESH_URL;\n    this.http.post(\n      endpoint,\n      body,\n      {headers: headers}\n    ).subscribe(\n      res => this.saveUserToken(res, refresh),\n      err => console.log(err)\n    );\n  }\n\n  // User token management\n\n  saveUserToken(res, refresh) {\n    this.auth.jwt = res;\n    let decoded = this.jwtHelper.decodeToken(res._body);\n    this.auth.token = decoded.token;\n    this.auth.username = decoded.login;\n    let expiration = this.jwtHelper.getTokenExpirationDate(res._body).getTime();\n    let now = new Date().getTime();\n    let timeout = expiration - now - 3600000;\n    console.log('Refresh again in ' + timeout);\n    this.save_auth();\n    this.timerRefreshToken = Observable.timer(timeout);\n    this.timerRefreshToken.subscribe(\n      x => this.refreshToken(refresh)\n    );\n  }\n\n  refreshToken(endpoint) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    let body = JSON.stringify(\n      {\n        'token': this.auth.token,\n        'user': this.auth.username,\n        'cliend_id': this.config.config.client_id\n      }\n    );\n    this.http.post(\n      endpoint,\n      body,\n      {headers: headers}\n    ).subscribe(\n      res => this.saveUserToken(res, endpoint),\n      err => console.log(err)\n    );\n  }\n\n}\n"]}